#ip 3
#00 addi 3 16 3 # first time jumps to instruction 17

# registers
# r0 //
# r1 // outer loop counter
# r2 // loop limit for both loops
# r3 // instruction pointer
# r4 // temporary register
# r5 // inner loop counter


# main part of program
#01 seti 1 6 1  # r1 = 1  // initialize outer loop counter

#02 seti 1 4 5  # r5 = 1  // initialize inner loop counter
#03 mulr 1 5 4  # r4 = r1 * r5
#04 eqrr 4 2 4  # r4 = r4 == r2 // condition whether to skip => if true will: r0 += r1 // will add r1 if r1 is a divisor of r2
#05 addr 4 3 3  # jump from ip: (5+r4)+1 => sometimes skips next    // r4 can be 1 or 0
#06 addi 3 1 3  # ip += 1 // always skips next
#07 addr 1 0 0  # r0 += r1 // only arriving here from #05 // first time adding: 1
#08 addi 5 1 5  # r5 += 1 // increment inner loop counter
#09 gtrr 5 2 4  # r4 = r5 > r2 // condition whether not to jump to #03
#10 addr 3 4 3  # ip += r4 => possibly skips the next instruction (jump)
#11 seti 2 6 3  # jump to #03 // continue inner loop

#12 addi 1 1 1  # r1 += 1 // increment outer loop counter
#13 gtrr 1 2 4  # r4 = r1 > r2 // condition whether not to jump to #02
#14 addr 4 3 3  # ip += r4 => possibly skips the next instruction (jump)
#15 seti 1 1 3  # jump to #02 // continue outer loop

#16 mulr 3 3 3  # ip = ip * ip => jump to exit (#257)

#17 addi 2 2 2  # r2 += 2 // coming from #00,
#18 mulr 2 2 2  # r2 = r2*r2
#19 mulr 3 2 2  # r2 *= 19 (because r3 is ip)
#20 muli 2 11 2 # r2 *= 11
#21 addi 4 8 4  # r4 += 8
#22 mulr 4 3 4  # r4 *= 22 (because r3 is ip)
#23 addi 4 12 4 # r4 += 12
#24 addr 2 4 2  # r2 += r4
# at this point:
#   r2 = (r2 + 2) * (r2 + 2) * 19 * 11 + (((r4 + 8) * 22) + 12)
       = 19 * r2^2 + 76 * r2 + 76 + 22 * r4 + 176 + 12
       = 19 * r2^2 + 76 * r2 + 22 * r4 + 264
       initially: 264
#25 addr 3 0 3  # ip += r0 // as for the first time r0=1, skipping the next instruction, or if r0 is huge, it will jump to exit
#26 seti 0 2 3  # jump to #01


# part to initialize (runs only once and only if part2)
#27 setr 3 9 4  # r4 = 27 (because r3 is ip)
#28 mulr 4 3 4  # r4 *= 28 (because r3 is ip)
#29 addr 3 4 4  # r4 += 29 (because r3 is ip)
#30 mulr 3 4 4  # r4 *= 30 (because r3 is ip)
#31 muli 4 14 4 # r4 *= 14
#32 mulr 4 3 4  # r4 *= 32 (because r3 is ip)
#33 addr 2 4 2  # r2 += r4 // effectivly r2 += (27*28 + 29) * 30 * 14 * 32 => r2 += 10550400
#34 seti 0 4 0  # r0 = 0 // resetting the r0 to the usual 0
#35 seti 0 3 3  # jump to #01